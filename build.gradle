plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'jacoco'
}

group = 'shop.zip'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
}

jacoco {
    toolVersion = "0.8.8"
}

repositories {
    mavenCentral()
}

dependencies {
    // security
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    //jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    // jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // mongo-db
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

    // web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // valid
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // h2
    runtimeOnly 'com.h2database:h2'

    // mysql
    runtimeOnly 'com.mysql:mysql-connector-j'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // restDocs
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0-b170201.1204'

    // logback
    implementation "ca.pjer:logback-awslogs-appender:1.6.0"

    //fly-way
    implementation 'org.flywaydb:flyway-core:9.16.0'
    implementation 'org.flywaydb:flyway-mysql'
}

ext {
    snippetsDir = file('build/generated-snippets')
}

bootJar {
    dependsOn asciidoctor
    copy {
        from "${asciidoctor.outputDir}"
        into 'BOOT-INF/classes/static/docs'
    }
}

asciidoctor {
    dependsOn test
    inputs.dir snippetsDir
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

task copyYML(type: Copy) {
    from file('./Travelzip_yml_importer')
    include "application.yml"
    into file('./src/main/resources')
}

task copyTestYml(type: Copy) {
    from file('./Travelzip_yml_importer')
    include "application-test.yml"
    rename 'application-test', 'application'
    into file('./src/test/resources')

}

test {
    dependsOn copyTestYml
    outputs.dir snippetsDir
    useJUnitPlatform()
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
    }

    finalizedBy 'jacocoTestReport'
}

jacocoTestReport {

    reports {
        csv.enabled true
        html.enabled true

        csv.destination file("${buildDir}/jacoco/index.csv")
        html.destination file("${buildDir}/jacoco/index.html")
    }

    def Qdomains = []
    for (qPattern in "**/QA".."**/QZ") {
        Qdomains.add(qPattern + "*")
    }

    afterEvaluate {

        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: [
                    '**/*Application*',
                    '**/*Exception*',
                    '**/dto/**',
                    '**/global/**',
                    '**/health/**',
                    '**/test/**',
                    '**/base/**'
            ] + Qdomains)
        }))
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    def Qdomains = []
    // 패키지 + 클래스명
    for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
        Qdomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            excludes = ['**/*Application*',
                        '**/*Exception*',
                        '**/dto/**',
                        '**/global/**',
                        '**/health/**',
                        '**/test/**',
                        '**/base/**'] + Qdomains // 제외할 Qdomains 패턴 추가
        }
    }
}

build {
    test
    dependsOn copyDocument
    dependsOn copyYML
}

jar {
    enabled = false
}